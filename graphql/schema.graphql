"A date String with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime String with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
}

type Lecturer {
    name: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    articles: [Article]! @hasMany
    researches: [Research]! @belongsToMany
    recognitions: [Recognition]! @hasMany
    nidn: String
    doctor_degree: String
    magister_degree: String
    academic_job: String
    specialty: String
    education_certificate_number: String
    is_ps_competent: Boolean
}

type Research {
    title: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    lecturers: [Lecturer]! @belongsToMany
    students: [Student]! @belongsToMany
    theme: String!
    year: String!
    information: String
}

type Recognition {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    lecturer: Lecturer! @belongsTo
    proof: String!
    specialty: String!
    is_international: Boolean!
    is_national: Boolean!
    is_local: Boolean!
    start_at: Int!
    finish_at: Int!
}

type Student {
    name: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    studyprogram: Studyprogram @belongsTo
    studentcourses: [StudentCourse] @hasMany
    graduation: Graduation @hasOne
    nim: String!
    name: String!
    specialty: String!
    is_active: Boolean!
    is_foreign: Boolean!
    is_fulltime: Boolean!
    is_graduated: Boolean!
    graduated_at: String
}

type Graduation {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    student: Student! @belongsTo
    job_type: String!
    has_job: Boolean!
    has_job_at: String
    is_job_related: Boolean!
    year: Int!
    start_at: Int!
    finish_at: Int!
}

type Cooperation {
    title: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    type: String
    benefit: String!
    institution_name: String!
    is_international: Boolean!
    is_national: Boolean!
    is_local: Boolean!
    start_at: Int!
    finish_at: Int!
    proof: String!
}

type Course {
    name: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    semesters: [Semester]! @belongsToMany
    competency: String!
    code: String!
    responsi_sks_weight: Float!
    seminar_sks_weight: Float!
    practice_sks_weight: Float!
    credit_to_hours_conversion: Float!
    must_attitude: Boolean!
    must_knowledge: Boolean!
    must_skills: Boolean!
    must_specialty_skills: Boolean!
    lesson_plan_document: String!
    organizing_unit: String!
}

type StudentSelection {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    year: Int!
    student: Student! @belongsTo
    is_accepted: Boolean!
    is_regular: Boolean!
    is_transfer: Boolean!
}

type Studyprogram {
    name: String!
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    students: [Student]! @hasMany
    thisyearstudents: [Student]! @hasMany
    type: String!
    accreditation: String!
    code: String!
    expired_at: String!
    lecturer: Lecturer! @belongsTo
}

type Pkm {
    title: String!
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    lecturers: [Lecturer]! @belongsToMany
    students: [Student]! @belongsToMany
    courses: [Course]! @belongsToMany
    theme: String!
    year: Int!
    integration_type: String
}

type Article {
    title: String
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    url: String
    lecturer: Lecturer! @belongsTo
}

type Survey {
    name: String!
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    plan: String!
    students: [Student]! @belongsToMany
}

type Semester {
    name: String!
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    year: Int!
    studentcourses: [StudentCourse]! @hasMany
    courses: [Course]! @belongsToMany
}

type StudentResearchActivity {
    name: String!
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    year: Int!
    student: Student! @belongsTo
    research: Research! @belongsTo
}

type CourseResearchIntegration {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    year: Int!
    student: Student! @belongsTo
    research: Research! @belongsTo
    course: Course! @belongsTo
    integration_type: String!
}

type StudentCourse {
    id: ID!
    created_at: DateTime!
    updated_at: DateTime!

    ipk: Float
    finish_at: String
    student: Student! @belongsTo
    semester: Semester! @belongsTo
    course: Course! @belongsTo
    is_finish: Boolean!
}

type Achievement {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime!

    is_local: Boolean!
    is_national: Boolean!
    is_international: Boolean!
    is_academic: Boolean!
    description: String!
    start_at: String
    finish_at: String
}

type Mutation {
    #Create
    createLecturer(input: CreateLecturerInput! @spread): Lecturer! @create
    createAchievement(input: CreateAchievementInput! @spread): Achievement!
        @create

    updateLecturer(id: ID!, input: CreateLecturerInput! @spread): Lecturer!
        @update
    deleteLecturers(id: [ID!]!): [Lecturer!]! @delete
}

input CreateLecturerInput {
    name: String!
    nidn: String
    doctor_degree: String
    magister_degree: String
    specialty: String
    academic_job: String
    education_certificate_number: String
    is_ps_competent: Boolean
}

input CreateAchievementInput {
    name: String!

    is_local: Boolean
    is_national: Boolean
    is_international: Boolean
    is_academic: Boolean
    description: String
    start_at: String
    finish_at: String
}

input CreateStudentInput {
    studyprogram_id: ID
    studentcourses: [ID]
    # graduation: Graduation @hasOne
    nim: String!
    name: String!
    specialty: String!
    is_active: Boolean!
    is_foreign: Boolean!
    is_fulltime: Boolean!
    is_graduated: Boolean!
    graduated_at: String
}

input CreateGraduationInput {
    student_id: ID!
    job_type: String!
    has_job: Boolean!
    has_job_at: String
    is_job_related: Boolean!
    year: Int!
    start_at: Int!
    finish_at: Int!
}

input CreateCooperationInput {
    title: String
    type: String
    benefit: String!
    institution_name: String!
    is_international: Boolean!
    is_national: Boolean!
    is_local: Boolean!
    start_at: Int!
    finish_at: Int!
    proof: String!
}

type CreateCourseInput {
    name: String
    semesters: [Semester]! @belongsToMany
    competency: String!
    code: String!
    responsi_sks_weight: Float!
    seminar_sks_weight: Float!
    practice_sks_weight: Float!
    credit_to_hours_conversion: Float!
    must_attitude: Boolean!
    must_knowledge: Boolean!
    must_skills: Boolean!
    must_specialty_skills: Boolean!
    lesson_plan_document: String!
    organizing_unit: String!
}

input UpsertStudentCourseInputHasMany {
    upsert: [UpsertStudentCourseInput!]
    delete: [ID!]
    connect: [ID!]
    disconnect: [ID!]
}

input UpsertStudentCourseInput {
    ipk: Float
    finish_at: String
    semester_id: ID!
    course_id: ID!
    is_finish: Boolean!
}

input CreateArticleInput {
    title: String!
    education_certificate_number: String
    lecturer_id: ID!
}

input CreateArticleInput {
    lecturer_id: ID!
    proof: String!
    specialty: String!
    is_international: Boolean!
    is_national: Boolean!
    is_local: Boolean!
    start_at: Int!
    finish_at: Int!
}

input CreateResearchInput {
    title: String!
    lecturers: CreateLecturerBelongsToMany
    student: CreateStudentBelongsToMany
    theme: String!
    year: String!
    information: String
}

input CreateLecturerBelongsToMany {
    upsert: [UpsertLecturerInput!]
    connect: [ID!]
    sync: [ID!]
}

input UpsertLecturerInput {
    id: ID!
}

input CreateStudentBelongsToMany {
    upsert: [UpsertStudentInput!]
    connect: [ID!]
    sync: [ID!]
}

input UpsertStudentInput {
    id: ID!
}

type Query {
    users: [User!]! @paginate(type: CONNECTION)
    user(id: ID @eq): User @find
    lecturer(id: ID @eq): Lecturer @find
    achievement(id: ID @eq): Achievement @find
    achievements: [Achievement!]! @paginate(type: CONNECTION)
    article(id: ID @eq): Article @find
    articles: [Article!]! @paginate(type: CONNECTION)
    cooperation(id: ID @eq): Cooperation @find
    cooperations: [Cooperation!]! @paginate(type: CONNECTION)
    course(id: ID @eq): Course @find
    courses: [Course!]! @paginate(type: CONNECTION)
    course_research_integration(id: ID @eq): CourseResearchIntegration @find
    course_research_integrations: [CourseResearchIntegration!]!
        @paginate(type: CONNECTION)
    graduation(id: ID @eq): Graduation @find
    graduations: [Graduation!]! @paginate(type: CONNECTION)
    pkm(id: ID @eq): Pkm @find
    pkms: [Pkm!]! @paginate(type: CONNECTION)
    recognition(id: ID @eq): Recognition @find
    recognitions: [Recognition!]! @paginate(type: CONNECTION)
    research(id: ID @eq): Research @find
    researches: [Research!]! @paginate(type: CONNECTION)
    semester(id: ID @eq): Semester @find
    semesters: [Research!]! @paginate(type: CONNECTION)
    student(id: ID @eq): Student @find
    students: [Student!]! @paginate(type: CONNECTION)
    student_course(id: ID @eq): StudentCourse @find
    student_courses: [StudentCourse!]! @paginate(type: CONNECTION)
    studyprogram(id: ID @eq): Studyprogram @find
    studyprograms: [Studyprogram!]! @paginate(type: CONNECTION)
    survey(id: ID @eq): Survey @find
    surveys: [Survey!]! @paginate(type: CONNECTION)
    lecturers: [Lecturer!]! @paginate(type: CONNECTION)

    student_selections: [StudentSelection!]! @paginate(type: CONNECTION)
}
